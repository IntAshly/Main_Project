# Generated by Selenium IDE
import pytest
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys

class TestInvalidData():
    def setup_method(self, method):
        self.driver = webdriver.Chrome()
        self.vars = {}
  
    def teardown_method(self, method):
        self.driver.quit()
  
    def test_invalidData(self):
        self.driver.get("http://127.0.0.1:8000/login/")
        self.driver.set_window_size(1382, 744)
        
        # Login process
        self.driver.find_element(By.ID, "email").click()
        self.driver.find_element(By.ID, "email").send_keys("nurturenest@gmail.com")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("Admin@123")
        self.driver.find_element(By.ID, "password").send_keys(Keys.ENTER)
        
        # Navigate to "Add Vaccines"
        self.driver.find_element(By.LINK_TEXT, "Add Vaccines").click()
        
        # Enter invalid data for batch number
        self.driver.find_element(By.ID, "b_no").click()
        self.driver.find_element(By.ID, "b_no").send_keys("tyyy")
        
        # Attempt to submit invalid data by clicking elsewhere to trigger validation
        self.driver.find_element(By.CSS_SELECTOR, ".main-content").click()
        
        # Clear and enter another invalid batch number
        self.driver.find_element(By.ID, "b_no").clear()
        self.driver.find_element(By.ID, "b_no").send_keys("o-00-====")
        
        # Capture and print any error message displayed
        try:
            error_message = self.driver.find_element(By.CSS_SELECTOR, ".error-message")  # Adjust selector as needed
            print("Error message displayed:", error_message.text)
        except:
            print("No error message found.")
        
        # Delay to observe the error message before closing the browser
        time.sleep(5)  # Adjust time as needed to view error message

        # Close the browser
        self.driver.close()

# If running the script directly, use pytest to execute the test
if __name__ == "__main__":
    pytest.main([__file__])
